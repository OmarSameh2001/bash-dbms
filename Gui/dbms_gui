#!/bin/bash

# variable for base directory and database count
BaseDir=$(pwd)
# for special characters validation
shopt -s extglob

# Main function
function main {
  checkDB
  flag=$?
  if [ $flag -eq 0 ]; then
    # start menu
    while true; do
      choice=$(zenity --list --column="Menu" "Create database" "List databases" "Connect to database" "Drop database" "Exit" --title="ITI DBMS" --text="$(ls -d */ | wc -l) databases found.\nWorking directory: $BaseDir")
      if [[ $? -eq 1 ]]; then
        exit 0
     fi  
      case $choice in
      "Create database")
        createDB
        ;;
      "List databases")
        listDB
        ;;
      "Connect to database")
        connectDB
        ;;
      "Drop database")
        dropDB
        ;;
      "Exit")
        break
        ;;
      *)
        break
        ;;
      esac
    done
  else
    # start menu
    while true; do
      choice=$(zenity --list --column="Menu" "Create database" "Exit" --title="ITI DBMS" --text="0 databases found.\nWorking directory: $BaseDir\nPlease create a database first.")
      if [[ $? -eq 1 ]]; then
        return
      fi
      case $choice in
      "Create database")
        createDB
        ;;
      "Exit")
        break
        ;;
      *)
        break
        ;;
      esac
    done
  fi
}


# create database
function createDB() {
  DBNAmeText="Please enter your DB name: "
  while true
  do
    DBName=$(zenity --entry --title="Create Database" --text="$DBNAmeText")
    if [[ $? -eq 1 ]]; then
      return
    fi
    # check if name starts with letter and replace spaces with _
    if [[ ${DBName:0:1} =~ [a-zA-Z] ]] && [[ $DBName =~ ^[a-zA-Z0-9[:space:]]*$ ]] ; then
      DBName=${DBName// /_}
    else
      DBNameText="Error DB name should start with only letters and can't have any special characters.\nPlease enter your DB name: "
      continue
    fi
    if [ -d "./$DBName" ] ; then
      DBNameText="Error DB with name $DBName already exists.\nPlease enter your DB name: "
      continue
    fi
    mkdir "$DBName"
    exit=$(zenity --question --title "Drop database" --text "Database $DBName is successfully Created.\nDo you want to do another operation?: " --width 200 --height 200)
    if [[ $? -eq 0 ]]; then
      return
    else
      exit 0
    fi
  done
}

# list databases
function listDB() {
  echo "=========================="
  echo "Databases list:"
  echo "=========================="
  # multi line
  ls -d */ | sed 's/[/]/ /g'
  echo "=========================="
  read -p "Press enter to continue..."
}

# connect to database by cd to its directory
function connectDB() {
  getDB
  choice=$(zenity --list --column="Database Name" "${databases[@]}" "Exit" --title="Connect to Database" --text="Please choose the database you want to connect: ")
  if [[ $? -eq 1 ]]; then
    return
  fi
  case $choice in
    "Exit")
      return
      ;;
    *)DBConnect=$choice
      cd "$DBConnect"
      accessTables "$DBConnect"
      # after exit accessTables (disconnect)
      cd ..
      ;;
  esac
}

# drop database
function dropDB() {
  getDB
  option2=$(zenity --list --column="Database Name" "${databases[@]}" "Exit" --title="Drop database" --text="Please choose the database you want to drop: ")
    if [[ $? -eq 1 ]]; then
      return
    fi
    case $option2 in
    "Exit")
      return
      ;;
    *)
      DBDrop=$option2
      dropFlag=$(zenity --list --title "Drop database" --text "Are you sure you want to permanently drop $DBDrop? [y/n]: " --column "Menu" "Yes" "No")
      if [[ $? -eq 1 ]]; then
        return
      elif [[ "$dropFlag" == "Yes" ]]; then
        rm -r "$DBDrop"
        exit=$(zenity --question --title "Drop database" --text "$DBDrop is successfully dropped.\nDo you want to do another operation?: " --width 200 --height 200)
        if [[ $? -eq 0 ]]; then
          return
        else
          exit 0
        fi
        return
      else
        return
      fi
      ;;
    esac
}


# Check if any DB exists
function checkDB() {
  if [ $(ls -d */ 2> /tmp/err | wc -w) -eq 0 ]; then
    return 1
  fi
}

# get all databases
function getDB() {
  databases=($(ls -d */ | sed 's/[/]//g'))
  return
}

# ===========================
# Table functions
# ===========================


function accessTables() {
  getTables
  if [[ -n ${tables[@]} ]]; then
    choice=$(zenity --list --column="Menu" "Create table" "List tables" "Insert into Table" "Select From Table" "Update Table" "Delete From Table" "Drop Table" "Exit" --title="Tables Menu" --text="You are connected to $1 database.\nChoose an option:")
    if [[ $? -eq 1 ]]; then
      return
    fi
    case $choice in
    "Create table")
      createTable
      accessTables $1
      ;;
    "List tables")
      listTables $1
      accessTables $1
      ;;
    "Drop Table")
      dropTable
      accessTables $1
      ;;
    "Insert into Table")
      insertTable
      accessTables $1
      ;;
    "Select From Table")
      selectTable
      accessTables $1
      ;;
    "Update Table")
      updateTable
      accessTables $1
      ;;
    "Delete From Table")
      deleteFromTable
      accessTables $1
      ;;
    "Exit")
      break
      ;;
    *)
      return
      ;;
    esac
  else
    choice=$(zenity --list --column="Menu" "Create table" "Exit" --title="Tables Menu" --text="No tables found in $1 database:")
    if [[ $? -eq 1 ]]; then
      return
    fi
    case $choice in
    "Create table")
      createTable
      accessTables $1
      ;;
    "Exit")
      return
      ;;
    *)
      return
      ;;
    esac
  fi
}

# implement (int, str, primary key) in metadata file, and tablename validation
function createTable() {
  if [[ -f "./.tmp_metadata" ]]; then
    rm .tmp_metadata
  fi
  tableNameText="Enter the name of the table you want to create:"
  while true
    do
    tableName=$(zenity --entry --title="Create Table" --text="$tableNameText")
    if [[ $? -eq 1 ]]; then
      return
    fi
    case $tableName in
    +([a-zA-Z])*([a-zA-Z0-9|" "]))
      tableName=${tableName/" "/"_"}
      if [ -e "./$tableName" ]; then
        tableNameText="Error Table with name $tableName already exists.\nEnter the name of the table you want to create.\nOr type exit."
      else
        break
      fi
      ;;
    *)
      if [[ $? == 0 ]]; then
        tableNameText="Error Table name should start with only letters and can't have any special characters.\nEnter the name of the table you want to create:\nor type exit"
      else
        return
      fi
      ;;
    esac
  done
  colNumText="Enter the number of columns in the table:"
  while true
    do
      colNum=$(zenity --entry --title="Create Table" --text="$colNumText")
      if [[ $? -eq 1 ]]; then
        return
      elif [[ $colNum =~ ^[0-9]+$ && $colNum -gt 0 ]]; then
        break
      else
        colNumText="Error: Enter a number that is greater than 0.\nEnter the number of columns in the table:"
      fi
    done

  for ((i=0;i<$colNum;i++))
    do
      line=""

      if [[ $i -eq 0 ]];
      then
        colNameText="Enter the name of the first column:"
        while true
          do
            colName=$(zenity --entry --title="Create Table" --text="$colNameText")
            if [[ $? -eq 1 ]]; then
              return
            fi
            case $colName in
            +([a-zA-Z])*([a-zA-Z0-9|" "]))
              colName=${colName/" "/"_"}
              line+=$colName
              break
              ;;
            *)
              if [[ $? == 0 ]]; then
                colNameText="Error column Name should start with only letters and can't have any special characters.\nEnter the name of the first column:"
              else
                return
              fi
              ;;
            esac
          done 

        colTypeText="Enter the type of the first column (int/str):"
        while true
          do
            colType=$(zenity --entry --title="Create Table" --text="$colTypeText")
            if [[ $? -eq 1 ]]; then
              return
            fi
            case $colType in
            "int")
              line+=:$colType
              break
              ;;

            "str")
              line+=:$colType
              break
              ;;
            *)
              if [[ $? == 0 ]]; then
                colTypeText="Invalid entry, please enter (int/str).\nEnter the type of the first column(int/str):"
              else
                return
              fi
              ;;
            esac
          done
        line+=:pk

      else
        colNameText="Enter the name of $(($i+1)) column:"
        while true
          do
            colName=$(zenity --entry --title="Create Table" --text="$colNameText")
            if [[ $? -eq 1 ]]; then
              return
            fi
            case $colName in
            #same validation done for PK name.
            +([a-zA-Z])*([a-zA-Z0-9|" "]))
              colName=${colName/" "/"_"}
              line+=$colName
              break
              ;;
            *)
              if [[ $? == 0 ]]; then
                colNameText="Error column Name should start with only letters and can't have any special characters.\nEnter the name of $(($i+1)) column:"
              else
                return
              fi
              ;;
            esac
          done

        while true
          do
            colTypeText="Invalid entry, please enter (int/str). "
            colType=$(zenity --entry --title="Create Table" --text="$colTypeText")
            if [[ $? -eq 1 ]]; then
              return
            fi
            case $colType in
            "int")
              line+=:$colType
              break
              ;;

            "str")
              line+=:$colType
              break
              ;;
            *)
              if [[ $? == 0 ]]; then
                colTypeText="Invalid entry, please enter (int/str). "
              else
                return
              fi
              ;;
            esac
        done
      fi
      echo $line >> .tmp_metadata
    done
    cat .tmp_metadata >> "./.$tableName"_metadata""
    rm .tmp_metadata
    touch "$tableName"
    exit=$(zenity --question --title "Drop database" --text "Table $tableName is successfully created.\nDo you want to do another operation?: " --width 200 --height 200)
    if [[ $? -eq 0 ]]; then
      return
    else
      exit 0
    fi
}

function listTables() {
  echo "=========================="
  echo "Tables list in $1 database:"
  echo "=========================="
  ls -p | grep -v / | grep -v "^\."
  echo "=========================="
  read -p "Press enter to continue..."
}

function insertTable() {
  getTables
  while true
  do
    choice=$(zenity --list --title="Insert to table" --text="Please choose the table you want to insert into or type exit: " --column="Table Name" "${tables[@]}" "Exit" )
    if [[ $? -eq 1 ]]; then
      return
    fi
    case $choice in
    #to verify first character to be a letter and to accept letters , numbers and underscore.
      "Exit")
        return
        ;;  
      +([a-zA-Z])*([a-zA-Z0-9|"_"]))
        tableName=$choice
        types=$(awk -F : ' {print $2} ' ./"."$tableName"_metadata" )
        names=$(awk -F : ' {print $1} ' ./"."$tableName"_metadata" )
        #to change string to an array. ==> hello my friend --> [hello,my,friend]
        namesArray=($names)
        typesArray=($types)
        numberOfColumns=$(awk -F : ' {} END {print NR}' ./"."$tableName"_metadata" )
        
        newTableLine=""
        for (( i=0;i<numberOfColumns;i++ ))
        do
          if [[ "${typesArray[$i]}" == "int" ]]
          then
            columnInputName="Enter the ${typesArray[$i]} value for column ${namesArray[$i]}: "
            while true
            do
              duplicateFlag=false
              columnInput=$(zenity --entry --title="Insert to table" --text="$columnInputName")
              if [[ $? -eq 1 ]]; then
                return
              elif [[ $columnInput =~ ^[0-9]+$ && $columnInput -ge 0 ]];
              then
                previousIds=$(awk -F : ' {print $1} ' ./$tableName )
                if [[ $i -eq 0 ]]
                then
                  for previous in $previousIds
                  do
                    if [[ "$previous" == "$columnInput" ]]
                    then
                      columnInputName="Erorr duplicate id, Enter the ${typesArray[$i]} value for column ${namesArray[$i]}: "
                      duplicateFlag="true"
                      break
                    fi
                  done
                  if [[ "$duplicateFlag" == "false" ]]
                  then
                    newTableLine+=$columnInput
                    break
                    continue
                  fi
                else
                newTableLine+=":$columnInput"
                fi
                
                if [[ "$duplicateFlag" == "true" ]]
                then
                  continue
                else
                  break

                  continue
                fi
                
              else
                columnInputName="Erorr ${namesArray[$i]} should be integer, Enter the ${typesArray[$i]} value for column ${namesArray[$i]}: "
              fi
            done
          #to handle if the column is a string.
          else
            columnInputName="Enter the ${typesArray[$i]} value for column ${namesArray[$i]}: "
            while true
            do
              duplicateFlag=false
              #change all string primary keys to lowercase before handling duplication
              columnInput=$(echo "$columnInput"| awk '{print tolower($0)}')
              previousIds=$(awk -F : ' {print $1} ' ./$tableName )
              columnInput=$(zenity --entry --title="Insert to table" --text="$columnInputName")
              if [[ $? -eq 1 ]]; then
                return
              elif [[ $i -eq 0 ]]
              then
                for previous in $previousIds
                do
                  if [[ "$previous" == "$columnInput" ]]
                  then
                    columnInputName="Erorr duplicate value, Enter the ${typesArray[$i]} value for column ${namesArray[$i]}: "
                    duplicateFlag="true"
                    break
                  fi
                done
                if [[ "$duplicateFlag" == "false" ]]
                then
                  newTableLine+=$columnInput
                  break
                  continue
                fi
              else
                newTableLine+=":$columnInput"
              fi
              
              if [[ "$duplicateFlag" == "true" ]]
              then
                continue
              else
                break
                continue
              fi
            done
            
            continue

          fi
        done
        echo $newTableLine >> ./$tableName
        exit=$(zenity --question --title "Drop database" --text "Data inserted successfully in $tableName.\nDo you want to do another operation?: " --width 200 --height 200)
        if [[ $? -eq 0 ]]; then
          return
        else
          exit 0
        fi
        ;;
      *)
        return
    esac
  done
}

function selectTable() {
  getTables
  searchTable=$(zenity --list --title "Select from table" --text "Select a table" --column "Tables" "${tables[@]}" "Exit")
    if [[ $? -eq 1 ]]; then
      return
    fi
    case $searchTable in
    "Exit")
      return
      ;;
    *)
        selectCondition=$(zenity --list --title "Select From table" --text "Select a condition" --column "Conditions" "All" "By Column" "Projection" "Exit")
          if [[ $? -eq 1 ]]; then
            return
          fi
          case $selectCondition in
          "All")
            echo "===============" && echo "All data in $searchTable: " && echo "===============" && cat ./"$searchTable" && echo "==============="
            read -p "Press enter to continue..."
            ;;
          "By Column")
              columns=($(awk -F ":" '{print $1}' "./.$searchTable"_metadata))
              column=$(zenity --list --title "Select From table by column" --text "Select a column" --column "Columns" "${columns[@]}" "Exit")
              if [[ $? -eq 1 ]]; then
                return
              fi
              case $column in
              "Exit")
                return
                ;;
              *)
                value=$(zenity --entry --title "Select From table by column" --text "Please enter the value of $choice")
                if [[ $? -eq 1 ]]; then
                  return
                fi
                comparison=$(zenity --list --title "Select From table by column" --text "Select a comparison method" --column "Comparisons" "Exact match" "Regular expression (like %%)" "Exit")
                  if [[ $? -eq 1 ]]; then
                    return
                  fi
                  case $comparison in
                  "Exit")
                    return
                    ;;
                  "Exact match")
                    compare="=="
                    ;;
                  "Regular expression (like %%)")
                    compare="~"
                    ;;
                  *)
                    return
                    ;;
                  esac

                if [[ $compare == "==" ]]; then
                  found=$(awk -F ":" -v col="$column" -v val="$value" '$col == val {print $0}' "./$searchTable")
                elif [[ $compare == "~" ]]; then
                  found=$(awk -F ":" -v col="$column" -v val="$value" '$col ~ val {print $0}' "./$searchTable")
                fi

                if [ -n "$found" ]; then
                  echo "Here are all records with column $column matching $value in $searchTable:"
                  echo "============="
                  echo "$found"
                  echo "============="
                  read -p "Press enter to continue..."
                else
                  echo "No records found with column $column matching $value."
                  read -p "Press enter to continue..."
                fi
                ;;
              esac
          ;;
          "Projection")
            columns=($(awk -F ":" '{print $1}' "./.$searchTable"_metadata))
                choice=$(zenity --list --title "Select From table by column projection" --text "Select a column" --column "Columns" "${columns[@]}" "Exit")
                  if [[ $? -eq 1 ]]; then
                    return
                  fi
                  case $choice in 
                    "Exit")
                      return
                      ;;
                    *)
                      column=$(awk -F ":" -v name="$choice" '$1 == name {print NR}' "./.$searchTable"_metadata)
                      projection=$(awk -F ":" -v column="$column" '{print $column}' "./$searchTable")
                      echo "Projection for column $choice in table $searchTable: "
                      echo "$projection"
                      read -p "Press enter to continue..."
                      ;;
                esac
            ;;
          "Exit")
            return
            ;;
          esac
      ;;
    esac
  
}

function updateTable() {
  getTables
  updateTable=$(zenity --list --title "Update Table" --text "Select a table to update:" --column "Tables" "${tables[@]}" "Exit")
    if [[ $? -eq 1 ]]; then
      return
    fi
    case $updateTable in
    "Exit")
      return
      ;;
    *)
        columns=($(awk -F ":" '{print $1}' "./.$updateTable"_metadata))  
        columnChoice=$(zenity --list --title "Update Table" --text "Select a type of update:" --column "Columns" "Whole Column" "Whole Row" "Exit")
        if [[ $? -eq 1 ]]; then
          return
        fi
          case $columnChoice in
          "Exit")
            return
            ;;
          "Whole Row")
            choice=$(zenity --list --title "Update Table" --text "Select a column to update its row:" --column "Columns" "${columns[@]}" "Exit")
              if [[ $? -eq 1 ]]; then
                return
              fi
              case $choice in
              "Exit")
                return
                ;;
              *)
                  # check if the value is in the table (regex for easier matching)
                  searchValueText="Please enter the value of $choice to search"
                  while true; 
                  do
                  searchValue=$(zenity --entry --title "Update Table" --text "$searchValueText")
                  if [[ $? -eq 1 ]]; then
                    return
                  fi
                  found=$(awk -F ":" -v reply="$REPLY" -v value="$searchValue" '$reply ~ value {print $0}' "./$updateTable")

                  if [ -n "$found" ]; then
                    
                    # convert to array to use select
                    foundArray=($found)
                    rowToUpdate=$(zenity --list --title "Update Table" --text "Here are all records with column $columnChoice = $searchValue in $updateTable.\nSelect a row to update:" --column "Rows" "${foundArray[@]}" "Exit")
                    if [[ $? -eq 1 ]]; then
                      return
                    fi
                      case $rowToUpdate in
                      "Exit")
                        return
                        ;;
                      *)
                          updatedRow=""
                          for (( i=0; i<${#columns[@]}; i++ )); do
                            currentValue=$(awk -F ":" -v col="$((i+1))" -v row="$rowToUpdate" '$0==row {print $col}' "./$updateTable")
                            type=$(awk -F ":" -v col="$((i+1))" 'NR==col {print $2}' "./.$updateTable"_metadata)
                            newValueText="Enter new value (Type: $type) for column ${columns[$i]} (Current: $currentValue): "
                            newValue=$(zenity --entry --title "Update Table" --text "$newValueText")
                            if [[ $? -eq 1 ]]; then
                              return
                            fi
                            # check for type
                            while true; do
                              while true; do
                              if [[ "$type" == "int" && ! $newValue =~ ^[0-9]+$ ]]; then
                                  newValueText="Erorr: The value must be an integer.\nEnter new value (Type: $type) for column ${columns[$i]} (Current: $currentValue): "
                                  newValue=$(zenity --entry --title "Update Table" --text "$newValueText")
                                  if [[ $? -eq 1 ]]; then
                                    return
                                  fi
                                  continue
                              fi
                              typeFlag=1
                              break
                              done
                            
                            # check for primary key
                            if [ $i -eq 0 ]; then
                              previousIds=$(awk -F : ' {print $1} ' ./$updateTable )
                              while true; do
                                for previous in $previousIds; do
                                  if [[ "$previous" == "$newValue" && "$currentValue" != "$newValue" ]]; then
                                    newValueText="Erorr: The value must be unique.\nEnter new value (Type: $type) for column ${columns[$i]} (Current: $currentValue): "
                                    newValue=$(zenity --entry --title "Update Table" --text "$newValueText")
                                    if [[ $? -eq 1 ]]; then
                                      return
                                    fi
                                    break
                                  else
                                    pkFlag=1
                                    break 2
                                  fi
                                done
                              done
                              if [[ $pkFlag -eq 1 && $typeFlag -eq 1 ]]; then
                                updatedRow+="$newValue"
                                break
                              fi
                            # non primary key
                            else
                              if [ $typeFlag -eq 1 ]; then
                                updatedRow+=":$newValue"
                                break
                              fi
                            fi
                            done
                          done
                          awk -F ":" -v oldRow="$rowToUpdate" -v newRow="$updatedRow" 'BEGIN {OFS=FS} $0==oldRow {$0=newRow} {print}' "./$updateTable" > temp && mv temp "./$updateTable"
                          
                          exit=$(zenity --question --title "Update Table" --text "Row updated successfully.\nDo you want to do another operation?:")
                          if [[ $? -eq 0 ]]; then
                            return
                          else
                            exit 0
                          fi
                        ;;
                      esac
                    exit=$(zenity --question --title "Update database" --text "Record updated successfully.\nDo you want to do another operation?: " --width 200 --height 200)
                    if [[ $? -eq 0 ]]; then
                      return
                    else
                      exit 0
                    fi
                  else
                    searchValueText="No records found with column $columnChoice = $searchValue.\nPlease enter the value of $choice to search:"
                  fi
                  done
                
                ;;
              esac
            
            ;;
          "Whole Column")
            choice=$(zenity --list --title "Update Table" --text "Select a column to update it:" --column "Columns" "${columns[@]}" "Exit")
            if [[ $? -eq 1 ]]; then
              return
            fi
              case $choice in
              "Exit")
                return
                ;;
              *)
                  type=$(awk -F ":" -v choice="$choice" '$1==choice {print $2}' "./.$updateTable"_metadata)
                  nc=$(awk -F ":" -v choice="$choice" '$1==choice {print NR}' "./.$updateTable"_metadata)
                  searchValue=$(zenity --entry --title "Update Table" --text "Please enter the value of $choice to update:")
                  if [[ $? -eq 1 ]]; then
                    return
                  fi
                  while true; do
                    # check if the value is in the table (strict no telda)
                    found=$(awk -F ":" -v numOfCol="$nc" -v value="$searchValue" '$numOfCol == value {print $0}' "./$updateTable")
                    if [ -n "$found" ]; then
                      
                      question=$(zenity --question --title "Update Table" --text "${#found[@]} Records found with column $choice = $searchValue.\n${found[@]}\nAre you sure you want to update these records $choice"s"?: " --width 400 --height 400)
                      
                      if [[ $? -eq 0 ]]; then
                        newValueText="Please enter the new value of $choice (Type: $type): "
                        while true; do
                          
                          newValue=$(zenity --entry --title "Update Table" --text "$newValueText")
                          if [[ $? -eq 1 ]]; then
                            return
                          fi
                          if [[ $type == "int" && ! $newValue =~ ^[0-9]+$ ]]; then
                            newValueText="Error: Value must be an integer.\nPlease enter the new value of $choice: "
                            continue  
                          fi
                          awk -F ":" -v srCol="$REPLY" -v srch="$searchValue" -v new="$newValue" 'BEGIN {OFS=FS} $srCol==srch {$srCol=new} {print}' "./$updateTable" > temp && mv temp "./$updateTable"
                          exit=$(zenity --question --title "Update Table" --text "Record updated successfully.\nDo you want to do another operation?: " --width 200 --height 200)
                          if [[ $? -eq 0 ]]; then
                            return
                          else
                            exit 0
                          fi
                        done
                        
                      else
                        return
                      fi
                    else
                      choice=$(zenity --list --title "Update Table" --text "No records found with column $choice = $searchValue.\nPlease enter the value of $choice to update:" --column "Columns" "${columns[@]}")
                      if [[ $? -eq 1 ]]; then
                        return
                      fi
                    fi
                  done
                ;;
              esac
            ;;
          *)
            return
            ;;
          esac
      ;;
    esac
}

function deleteFromTable() {
  # implement remove logic
  getTables
  option6=$(zenity --list --column="Menu" "${tables[@]}" "Exit" --title="Delete From table" --text="Please choose the table you want to Delete From: ")
  if [[ $? -eq 1 ]]; then
    return
  fi
  case $option6 in
    "Exit")
      return
      ;;
    *)
      tableName=$option6
        choice2=$(zenity --list --column="Delete options" "By id" "By Column" "All" "Exit" --title="Delete From table" --text="Please choose the way you want to Delete From: ")
          if [[ $? -eq 1 ]]; then
            return
          fi
          case $choice2 in #second
            "By id")
              pktype=$(awk -F : ' {if(NR==1){print $2}} ' ./"."$tableName"_metadata" )
              pkName=$(awk -F : ' {if(NR==1){print $1}} ' ./"."$tableName"_metadata" )
              #Incase we have int primary key
              if [[ "$pktype" == "int"  ]];then
                pkInputName="Enter the $pkName of the row you want to delete (Only Numbers are accepted): "
                while true;
                  do #third
                    idExistFlag=false
                    pkInput=$(zenity --entry --title="Delete From table" --text="$pkInputName")
                    if [[ $? -eq 1 ]]; then
                      return
                    fi
                    if [[ $pkInput =~ ^[0-9]+$ && $pkInput -ge 0 ]]; then
                      #store all previous Ids in a variable
                      previousIds=$(awk -F : ' {print $1} ' ./$tableName )
                      #change all previous Ids string to array
                      previousIdsArray=($previousIds)
                      previousIdsCount=$(awk -F : ' END {print NR}' ./$tableName )
                      pkInputIndex=0
                      #Loop over all the previous ids to check if the entered PK exist or no.
                      for (( i=0;i<previousIdsCount;i++ ));do #fourth
                        if [[ "${previousIdsArray[$i]}" == "$pkInput" ]];then
                          idExistFlag=true
                          ((pkInputIndex=$i+1))
                          break #from fourth
                        fi
                      done
                      #if primary key exist we delete the whole row which include this Id using sed command,
                      if [[ "$idExistFlag" == "true" ]];then
                        sed -i "${pkInputIndex}d" ./$tableName # the first "" are for macOS Compatibility issues with sed with option i command
                        exit=$(zenity --question --title "Delete From table" --text "Record deleted successfully.\nDo you want to do another operation?: " --width 200 --height 200)
                        if [[ $? -eq 0 ]]; then
                          return
                        else
                          exit 0
                        fi
                      else
                        pkInputName="Error: $pkInput is not found.\nPlease Enter $pkName of the row you want to delete (Only Numbers are accepted): "
                      fi
                    fi
                  done
              else
                echo "no id for this table"
                return
              fi
              ;;
            "By Column")
              types=$(awk -F : ' {print $2} ' ./"."$tableName"_metadata" )
              names=$(awk -F : ' {print $1} ' ./"."$tableName"_metadata" )
              values=$(awk -F : ' {print $1} ' ./"."$tableName"_metadata" )
              namesArray=($names)
              typesArray=($types)
              option5=$(zenity --list --column="Columns" "${namesArray[@]}" "Exit" --title="Delete From table" --text="Please choose the column you want to Delete From: ")
              if [[ $? -eq 1 ]]; then
                return
              fi
                case $option5 in
                  "Exit")
                    return
                    ;;
                  *)
                      #get the fieldNumber of the column the user wants to delete
                      FieldNumber=$(awk -F : -v option="$option5" ' {if($1==option){print NR}} ' ./"."$tableName"_metadata" )
                      #store all the values of the selected column.
                      columnValues=$(awk -F : -v fieldNumber="$FieldNumber" ' {print $fieldNumber} ' ./$tableName )
                      #change from string to array.
                      columnValuesArray=($columnValues)
                      #ask the user to enter the column value of the row he wants to delete.
                      while true ;do #six
                        columnExistflag=false
                        colValueInput=$(zenity --entry --title="Delete From table" --text="Please Enter $option5 of the row you want to delete : ")
                        if [[ $? -eq 1 ]]; then
                          return
                        fi
                        colInputIndexes=()
                        #loop over all the column values to check if the entered column exist or no,
                        #and store all columns index that match the user input in an array.
                        for (( i=0;i<${#columnValuesArray[@]};i++ ));do #seven
                          if [[ "${columnValuesArray[$i]}" == "$colValueInput" ]];then
                            columnExistflag=true
                            colInputIndexes+=($((i + 1))) #array.
                          fi
                        done
                        if [[ "$columnExistflag" == "true" ]];then
                          #loop over all the array of indexes starting from end
                          # to prevent the rows from shifting upward when deleting using sed command
                          # to delete all rows with index stored in the array.
                          for (( i=${#colInputIndexes[@]}-1;i>=0;i-- ));do
                            sed -i "${colInputIndexes[i]}d" ./$tableName # the first "" are for macOS Compatibility issues with sed with option i command
                            
                          done
                          exit=$(zenity --question --title "Delete From table" --text "${#colInputIndexes[@]} Records deleted successfully.\nDo you want to do another operation?: " --width 200 --height 200)
                        else
                          echo "this $colValueInput is not found please try again."
                        fi
                      done
                    ;;
                esac
              ;;
            "All")
              verification=$(zenity --list --column="Menu" "Yes" "No" --title="Delete From table" --text="Are you sure that you want to delete the entire content of table $tableName?")
              if [[ $? -eq 1 ]]; then
                return
              fi
              case $verification in
                "Yes")
                  sed -i "d" ./$tableName #to delete the entire content of the file
                  exit=$(zenity --question --title "Delete From table" --text "All Records deleted successfully.\nDo you want to do another operation?: " --width 200 --height 200)
                  if [[ $? -eq 0 ]]; then
                    return
                  else
                    exit 0
                  fi
                  ;;
                "No")
                  return
                  ;;
              esac
              ;;  
            "Exit")
              return
              ;;
          esac
      ;;
  esac
}


# drop table
function dropTable() {
  getTables
  TBdrop=$(zenity --list --title "Drop Table" --text "Select a table" --column "Tables" "${tables[@]}" "Exit")
    if [[ $? -eq 1 ]]; then
      return
    fi
    case $TBdrop in
    "Exit")
      return
      ;;
    *)
        dropFlag=$(zenity --list --title "Drop Table" --text "Are you sure you want to permanently drop $TBdrop? [y/n]: " --column "Menu" "Yes" "No")
        if [[ $? -eq 1 ]]; then
          return
        elif [[ "$dropFlag" == "Yes" ]]; then
          rm "$TBdrop"
          rm "./.$TBdrop"_metadata
          exit=$(zenity --question --title "Drop Table" --text "$TBdrop is successfully dropped.\nDo you want to do another operation?: " --width 200 --height 200)
          if [[ $? -eq 0 ]]; then
            return
          else
            exit 0
          fi
        else
          return
        fi
      ;;
    esac
}

function getTables() {
  # get tables (list all except dir (/) and hidden files (\.))
  tables=($(ls -p | grep -v / | grep -v "^\."))
}

main
