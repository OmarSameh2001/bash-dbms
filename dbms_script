#!/bin/bash

# variable for exit message
mainMenu="1)Create database 2)List databases 3)Connect to database 4)Drop database 5)Exit"
function main {
  # check if current directory is bash-dbms
  # remove 
  if [ -e ~/dev/bash-dbms ]; then
    cd ~/dev/bash-dbms
  fi
  # start menu
  echo "Welcome to ITI DBMS"
  select option1 in "Create database" "List databases" "Connect to database" "Drop database" "Exit"; do
    if [ -e ~/dev/bash-dbms ]; then
      cd ~/dev/bash-dbms
    fi
    case $option1 in
    "Create database")
      createDB
      echo $mainMenu
      ;;
    "List databases")
      checkDB
      flag=$?
      if [ $flag -eq 0 ]; then 
        listDB
      fi
      echo $mainMenu
      ;;
    "Connect to database")
      checkDB
      flag=$?
      if [ $flag -eq 0 ]; then
        connectDB
      fi
      echo $mainMenu
      ;;
    "Drop database")
      checkDB
      flag=$?
      if [ $flag -eq 0 ]; then
        dropDB
      fi
      echo $mainMenu
      ;;
    "Exit")
      break
      ;;
    *)
      echo "Invalid option. Please try again."
      ;;
    esac
  done
}

# create database
# add db name validation
function createDB() {
  read -p "Please enter your DB name: " DBName
  if [ -d "./$DBName" ]; then
    echo "$DBName already exists"
    return
  fi
  mkdir "$DBName"
  echo "Successfully created $DBName"
}

# list databases
function listDB() {
  echo "Databases list:"
  echo "=========================="
  ls -d */ | sed 's|[/,]||g'
}

# connect to database by cd to its directory
function connectDB() {
  databases=$(ls -d */ | sed 's|[/,]||g')
  echo "Please enter the number of the database you want: "
  select option2 in "$databases" "Exit"; do
    case $option2 in
    "Exit")
      echo "Exiting..."
      break
      ;;
    *)
      DBConnect=$option2
      if [[ -d "$DBConnect" ]]; then
        cd "$DBConnect"
        echo "Connected to $DBConnect"
        accessTables "$DBConnect"
        # after exit accessTables (disconnect)
        cd ..
        echo "Disconnected from DB $DBConnect"
        break
      else
        # $REPLY is the selected number
        echo "Database with number $REPLY does not exist."
        echo "Please enter valid number for the database you want: "
      fi
      ;;
    esac
  done
}

# drop database
function dropDB() {
  databases=$(ls -d */ | sed 's|[/,]||g')
  echo "Please enter the number of the database you want to drop: "
  select option2 in "$databases" "Exit"; do
    case $option2 in
    "Exit")
      echo "Exiting..."
      break
      ;;
    *)
      DBDrop=$option2
      if [[ -d "$DBDrop" ]]; then
        read -p "Are you sure you want to permanently drop $DBDrop? [y/n]: " dropFlag
        if [[ "yes" =~ "$dropFlag" ]]; then
          rm -r "$DBDrop"
          echo "$DBDrop is successfully dropped"
        else
          echo "Database drop cancelled."
        fi
      else
        echo "Database with number $REPLY does not exist."
        echo "Please enter valid number for the database you want to drop: "
      fi
      break
      ;;
    esac
  done
}


# Check if any DB exists
function checkDB() {
  if [ $(ls -d */ 2> /tmp/err | wc -w) -eq 0 ]; then
    echo "No databases found."
    return 1
  fi
}


# ===========================
# Table functions
# ===========================
# need to implement createTable, insertTable, selectTable, removeTable.
# drop and list is done


function accessTables() {
  echo "Welcome to $1 database"
  select option3 in "Create table" "List tables" "Insert into table" "Select table" "Remove from table" "Drop table" "Exit"; do
    case $option3 in
    "Create table")
      createTable
      ;;
    "List tables")
      listTables
      ;;
    "Insert into table")
      insertTable
      ;;
    "Select table")
      selectTable
      ;;
    "Remove from table")
      removeTable
      ;;
    "Drop table")
      dropTable
      ;;
    "Exit")
      break
      ;;
    *)
      echo "Invalid option. Please try again."
      ;;
    esac
  done
}

# implement (int, str, primary key) in metadata file, and tablename validation
function createTable() {
  read -p "Please enter the name of the table you want to create: " tableName
  if [ -f "./$tableName" ]; then
    echo "Table $tableName already exists"
    return
  fi
  # implement (int, str, primary key) in metadata file, and tablename validation
  touch "$tableName"
  echo "Table $tableName is successfully created"
}

function listTables() {
  echo "Tables list:"
  echo "=========================="
  ls -p | grep -v / | grep -v "^\."
}


# implement insert logic
function insertTable() {
  tables=$(ls -p | grep -v / | grep -v "^\.")
  select option4 in "$tables"; do
    echo "Please enter the name or number of the table you want to insert into: "
    case $option4 in
    +[0-9]*[0-9])
      tableName=$option4
      if [ -f "./$tableName" ]; then
        # implement insert logic
        echo "Data inserted successfully"
        break
      else
        echo "Table $tableName does not exist."
      fi
      ;;
    *)
      echo "Invalid option. Please try again."
      ;;
    esac
  done
}

function selectTable() {
  # implement select logic (mina nagy youtube) (all, equal (by id or column), bonus is < or >), projecion is bonus
  tables=$(ls -p | grep -v / | grep -v "^\.")
  select option4 in "$tables" "Exit"; do
    echo "Please enter the name or number of the table you want: "
    case $option4 in
    "Exit")
      echo "Exiting..."
      break
      ;;
    *)
      if [ -f "./$option4" ]; then
        echo "Connected to $option4"
        # implement select logic (mina nagy youtube) (all, equal (by id or column), bonus is < or >), projecion is bonus
      else
        echo "Table with number $REPLY does not exist."
      fi
      break
      ;;
    esac
  done
}

function removeTable() {
  # implement remove logic
  tables=$(ls -p | grep -v / | grep -v "^\.")
  select option4 in "$tables" "Exit"; do
    echo "Please enter the name or number of the table you want: "
    case $option4 in
    "Exit")
      echo "Exiting..."
      break
      ;;
    *)
      if [ -f "./$option4" ]; then
        echo "Connected to $option4"
        # implement remove logic
      else
        echo "Table with number $REPLY does not exist."
      fi
      break
      ;;
    esac
  done
}


# drop table
function dropTable() {
  tables=$(ls -p | grep -v / | grep -v "^\.")
  select TBdrop in "$tables" "Exit"; do
    case $TBdrop in
    "Exit")
      echo "Exiting..."
      break
      ;;
    *)
      if [ -f "./$TBdrop" ]; then
        read -p "Are you sure you want to permanently drop $TBdrop? [y/n]: " dropFlag
        if [[ "$dropFlag" == "y" ]]; then
          rm "$TBdrop"
          echo "$TBdrop is successfully dropped"
          break
        else
          echo "Table drop operation cancelled."
          break
        fi
      else
        echo "Table $TBdrop does not exist."
      fi
      ;;
    esac
  done
}
main