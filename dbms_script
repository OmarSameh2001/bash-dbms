#!/bin/bash

fail="1)Create database 2)List databases 3)Connect to database 4)Drop database 5)Exit"
function main {
  if [ -e ~/dev/bash-dbms ]; then
    cd ~/dev/bash-dbms
  fi
  echo "Welcome to ITI DBMS"
  select option1 in "Create database" "List databases" "Connect to database" "Drop database" "Exit"; do
    if [ -e ~/dev/bash-dbms ]; then
      cd ~/dev/bash-dbms
    fi
    case $option1 in
    "Create database")
      createDB
      ;;
    "List databases")
      checkDB
      flag=$?
      if [ $flag -eq 0 ]; then 
        listDB
      fi
      ;;
    "Connect to database")
      checkDB
      flag=$?
      if [ $flag -eq 0 ]; then
        connectDB
      fi
      ;;
    "Drop database")
      checkDB
      flag=$?
      if [ $flag -eq 0 ]; then
        dropDB
      fi
      ;;
    "Exit")
      break
      ;;
    *)
      echo "Invalid option. Please try again."
      ;;
    esac
  done
}

function createDB() {
  read -p "Please enter your DB name: " DBName
  if [ -d "./$DBName" ]; then
    echo "$DBName already exists"
    return
  fi
  mkdir "$DBName"
  echo "Successfully created $DBName"
}

function listDB() {
  echo "Databases list:"
  echo "=========================="
  ls -d */ | sed 's|[/,]||g'
}

function connectDB() {
  directories=$(ls -d */ | sed 's|[/,]||g')
  echo "Please enter the name or number of the database you want: "
  select option2 in "$directories" "Exit"; do
    case $option2 in
    "Exit")
      echo "Exiting..."
      echo $fail
      break
      ;;
    *)
      DBConnect=$option2
      if [[ -d "$DBConnect" ]]; then
        cd "$DBConnect"
        echo "Connected to $DBConnect"
        accessDB "$DBConnect"
        cd ..
        echo "Disconnected from DB $DBConnect"
        echo $fail
        break
      else
        echo "Database with number $REPLY does not exist."
        echo "Please enter valid name or number for the database you want: "
      fi
      ;;
    esac
  done
}

function dropDB() {
  directories=$(ls -d */ | sed 's|[/,]||g')
  echo "Please enter the name or number of the database you want to drop: "
  select option2 in "$directories" "Cancel"; do
    case $option2 in
    "Cancel")
      echo "Cancelling..."
      echo $fail
      break
      ;;
    *)
      DBDrop=$option2
      read -p "Are you sure you want to permanently drop $DBDrop? [y/n]: " dropFlag
      if [[ "$dropFlag" =~ "yes" ]]; then
        if [ -d "$DBDrop" ]; then
          rm -r "$DBDrop"
          echo "$DBDrop is successfully dropped"
        else
          echo "Database $DBDrop does not exist."
        fi
      else
        echo "Database with number $REPLY does not exist."
        echo "Please enter valid name or number for the database you want to drop: "
      fi
      ;;
    esac
  done
}


# Check if any DB exists
function checkDB() {
  if [ $(ls -d */ 2> /tmp/err | wc -w) -eq 0 ]; then
    echo "No databases found."
    return 1
  fi
}



function accessDB() {
  echo "Welcome to $1 database"
  select option3 in "Create table" "List tables" "Select table" "Drop table" "Exit"; do
    case $option3 in
    "Create table")
      createTable
      ;;
    "List tables")
      listTables
      ;;
    "Select table")
      selectTable
      ;;
    "Drop table")
      dropTable
      ;;
    "Exit")
      break
      ;;
    *)
      echo "Invalid option. Please try again."
      ;;
    esac
  done
}
function createTable() {
  read -p "Please enter the name of the table you want to create: " tableName
  if [ -f "./$tableName" ]; then
    echo "Table $tableName already exists"
    return
  fi
  touch "$tableName"
  echo "Table $tableName is successfully created"
}

function listTables() {
  echo "Tables list:"
  echo "=========================="
  ls -p | grep -v / | grep -v "^\."
}

function selectTable() {
  # implement select logic (queries)
  files=$(ls -p | grep -v / | grep -v "^\.")
  select option4 in "$files"; do
    echo "Please enter the name or number of the table you want: "
    case $option4 in
    +[0-9]*[0-9])
    echo
      # TBConnect=$option4
      # if [ -f "./$TBConnect" ]; then
      #   echo "Connected to $TBConnect"
      # else
      #   echo "Table $TBConnect does not exist."
      # fi
      break
      ;;
    esac
  done
}

function dropTable() {
  # make select
  read -p "Please enter the name of the table you want to drop: " TBdrop
  read -p "Are you sure you want to permanently drop $TBdrop? [y/n]: " dropFlag
  if [[ "$dropFlag" == "y" ]]; then
    if [ -f "$TBdrop" ]; then
      rm "$TBdrop"
      echo "$TBdrop is successfully dropped"
    else
      echo "Table $TBdrop does not exist."
    fi
  else
    echo "Table drop operation cancelled."
  fi
}
main