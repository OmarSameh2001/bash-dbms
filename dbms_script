#!/bin/bash

# variable for base directory
BaseDir=$(pwd)
DBCount=$(ls -d */ | wc -l)
# variable for exit message
shopt -s extglob
mainMenu="1)Create database 2)List databases 3)Connect to database 4)Drop database 5)Exit"
function main {
  # start menu
  echo "Welcome to ITI DBMS"
  echo "Working directory: $BaseDir"
  echo "This directory contains $DBCount databases"
  echo "=========================="

  select option1 in "Create database" "List databases" "Connect to database" "Drop database" "Exit"; do
    if [ $(pwd) != $BaseDir ]; then
      cd ${BaseDir}
      echo "returned to base directory: $BaseDir"
    fi
    case $option1 in
    "Create database")
      createDB
      echo $mainMenu
      ;;
    "List databases")
      checkDB
      flag=$?
      if [ $flag -eq 0 ]; then 
        listDB
      fi
      echo $mainMenu
      ;;
    "Connect to database")
      checkDB
      flag=$?
      if [ $flag -eq 0 ]; then
        connectDB
      fi
      echo $mainMenu
      ;;
    "Drop database")
      checkDB
      flag=$?
      if [ $flag -eq 0 ]; then
        dropDB
      fi
      echo $mainMenu
      ;;
    "Exit")
      break
      ;;
    *)
      echo "Invalid option. Please try again."
      echo $mainMenu
      ;;
    esac
  done
}

# create database
# add db name validation



function createDB() {
  while true
  do
    read -p "Please enter your DB name: " DBName
    if [[ 'exit' =~ $DBName ]] ; then
      echo "Exiting..."
      break
    fi
    # check if name starts with letter and replace spaces with _
    if [[ ${DBName:0:1} =~ [a-zA-Z] ]] && [[ $DBName =~ ^[a-zA-Z0-9[:space:]]*$ ]] ; then
      DBName=${DBName// /_}
    else
      echo "Name should start with a letter and has no special characters"
      continue
    fi
    if [ -d "./$DBName" ] ; then
      echo "$DBName already exists"
      continue
    fi
    mkdir "$DBName"
    echo "Successfully created $DBName"
    break
  done
}

# list databases
function listDB() {
  echo "Databases list:"
  echo "=========================="
  # multi line
  ls -d */ | sed 's/[/]/ /g'
  echo "=========================="
}

# connect to database by cd to its directory
function connectDB() {
  getDB
  echo "Please enter the number of the database you want: "
  select option2 in "${databases[@]}" "Exit"; do
    case $option2 in
    "Exit")
      echo "Exiting..."
      break
      ;;
    *)
      DBConnect=$option2
      if [[ -d "$DBConnect" ]]; then
        cd "$DBConnect"
        echo "Connected to $DBConnect"
        accessTables "$DBConnect"
        # after exit accessTables (disconnect)
        cd ..
        echo "Disconnected from DB $DBConnect"
        break
      else
        # $REPLY is the selected number
        echo "Database with number $REPLY does not exist."
        echo "Please enter valid number for the database you want: "
      fi
      ;;
    esac
  done
}

# drop database
function dropDB() {
  getDB
  echo "Please enter the number of the database you want to drop: "
  select option2 in "${databases[@]}" "Exit to main menu"; do
    case $option2 in
    "Exit to main menu")
      echo "Exiting..."
      break
      ;;
    *)
      DBDrop=$option2
      if [[ -d "$DBDrop" ]]; then
        read -p "Are you sure you want to permanently drop $DBDrop? [y/n]: " dropFlag
        if [[ "yes" =~ "$dropFlag" ]]; then
          rm -r "$DBDrop"
          echo "$DBDrop is successfully dropped"
          break
        else
          echo "Database drop cancelled."
          break
        fi
      else
        echo "Database with number $REPLY does not exist."
        echo "Please enter valid number for the database you want to drop: "
      fi
      ;;
    esac
  done
}


# Check if any DB exists
function checkDB() {
  if [ $(ls -d */ 2> /tmp/err | wc -w) -eq 0 ]; then
    echo "No databases found."
    return 1
  fi
}

function getDB() {
  databases=($(ls -d */ | sed 's/[/]//g'))
  return
}


# ===========================
# Table functions
# ===========================
# need to implement createTable, insertTable, selectTable, removeTable.
# drop and list is done


function accessTables() {
  echo "Welcome to $1 database"
  menu="1)Create table 2)List tables 3)Drop Table 4)Insert into Table 5)Select From Table 6)Delete From Table 7)Exit"
  PS3="Please select a number from the menu: "
  select option3 in "Create table" "List tables" "Drop Table" "Insert into Table" "Select From Table" "Delete From Table" "Exit"; do
    case $option3 in
    "Create table")
      createTable
      echo $menu
      ;;
    "List tables")
      listTables
      ;;
    "Drop Table")
      dropTable
      ;;
    "Insert into Table")
      insertTable
      ;;
    "Select From Table")
      selectTable
      ;;
    "Delete From Table")
      removeTable
      ;;
    "Exit")
      break
      ;;
    *)
      echo "Invalid entry. Please try again."
      ;;
    esac
  done
}

# implement (int, str, primary key) in metadata file, and tablename validation
function createTable() {
  
  
  while true
    do
  read -p "Please enter the name of the table you want to create or type exit: " tableName
    case $tableName in
    @([eE][xX][iI][tT]))
      echo "exiting.."
      return
      ;;
    +([a-zA-Z])*([a-zA-Z0-9|" "]))
      tableName=${tableName/" "/"_"}
      echo "$tableName is a valid name"
      break
      ;;
    *)
      echo "Name should start with only letters and can't have any special characters."
      ;;
    esac
  done
  if [ -e "./$tableName" ]; then
    echo "Table $tableName already exists"
    return
  else

  

    while true

      do
      read -p "Enter the number of columns in the table: " colNum
      if [[ $colNum =~ ^[0-9]+$ && $colNum -gt 0 ]]; then
        echo $colNum
        break
      else
        echo "Error: Number of columns must be a positive integer"
      fi
    done


    for ((i=0;i<$colNum;i++))
    do
      line=""

      if [[ $i -eq 0 ]]
      then
      echo $i
        while true
        do
          read -p "Please enter the name of you primary key column " colName
          case $colName in
          +([a-zA-Z])*([a-zA-Z0-9|" "]))
            colName=${colName/" "/"_"}
            line+=$colName
            break
            ;;
          *)
            echo "column Name should start with only letters and can't have any special characters."
            ;;
          esac
        done

        while true
        do
          read -p "Please enter the primary key column type (int/str): " colType
          case $colType in
          "int")
            line+=:$colType
            break
            ;;

          "str")
            line+=:$colType
            break
            ;;
          *)
            echo "Invalid entry, please enter (int/str)."
            ;;
          esac
        done
      line+=:pk
      echo "hello after pk"

      else
        while true
          do
            read -p "Please enter the name of the column " colName
            case $colName in
            +([a-zA-Z])*([a-zA-Z0-9|" "]))
              colName=${colName/" "/"_"}
              line+=$colName
              break
              ;;
            *)
              echo "column Name should start with only letters and can't have any special characters. "
              ;;
            esac
          done

        while true
          do
            read -p "Please enter column type (int/str): " colType
            case $colType in
            "int")
              line+=:$colType
              break
              ;;

            "str")
              line+=:$colType
              break
              ;;
            *)
              echo "Invalid entry, please enter (int/str)."
              ;;
            esac
        done

      fi
    echo $line >> .$tableName"_metadata"

    done

    
    # implement (int, str, primary key) in metadata file, and tablename validation
    touch "$tableName"
    echo "Table $tableName is successfully created"
  fi
}

function listTables() {
  echo "Tables list:"
  echo "=========================="
  ls -p | grep -v / | grep -v "^\."
}


# implement insert logic
# pseudocode:
# 1) ask user to enter name of table he want to insert to.
# 2) perform name validation.
# 3)get the pk column from metadata.

function insertTable() {
  tables=$(ls -p | grep -v / | grep -v "^\.")
  echo "Here are the tables in this database: "
  echo "================================================================================"
  echo $tables
  echo "================================================================================"
  
  while true
  do
    read -p "Please enter the name of the table you want to insert into: " choice
    case $choice in
    +([a-zA-Z])*([a-zA-Z0-9|"_"]))
      tableName=$choice
      if [ -f "./$tableName" ]
      then
        # awk -F : ' 
        #   begin{types=""} 
        #   {
        #     print $2
            
        #   } 
        #   end{} 
        # ' ./"."$tableName"_metadata"  
        while IFS=":" read -r name type pk; 
        do
          while true
          do
            read -p "Please insert $type for column $name " input
            if [[ $input -eq " " ]]
             then
              echo "Error please enter anything. "
            else
              if [[ $type -eq "str" ]]
              then
              $type: >> ./$tableName
              break
              fi
            fi  



            
            
            

          done
          
        
        done <./"."$tableName"_metadata"
        echo "Data inserted successfully"      
        break
      else
        echo "Table $tableName does not exist."
      fi
      ;;
    *)
      echo "Error, table name must start with a letter and doesn't have any special characters, Please try again "
    esac
  done
  
}

function selectTable() {
  # implement select logic (mina nagy youtube) (all, equal (by id or column), bonus is < or >), projecion is bonus
  tables=$(ls -p | grep -v / | grep -v "^\.")
  select option4 in "$tables" "Exit"; do
    echo "Please enter the name or number of the table you want: "
    case $option4 in
    "Exit")
      echo "Exiting..."
      break
      ;;
    *)
      if [ -f "./$option4" ]; then
        echo "Connected to $option4"
        # implement select logic (mina nagy youtube) (all, equal (by id or column), bonus is < or >), projecion is bonus
      else
        echo "Table with number $REPLY does not exist."
      fi
      break
      ;;
    esac
  done
}

function removeTable() {
  # implement remove logic
  tables=$(ls -p | grep -v / | grep -v "^\.")
  select option4 in "$tables" "Exit"; do
    echo "Please enter the name or number of the table you want: "
    case $option4 in
    "Exit")
      echo "Exiting..."
      break
      ;;
    *)
      if [ -f "./$option4" ]; then
        echo "Connected to $option4"
        # implement remove logic
      else
        echo "Table with number $REPLY does not exist."
      fi
      break
      ;;
    esac
  done
}


# drop table
function dropTable() {
  tables=$(ls -p | grep -v / | grep -v "^\.")
  select TBdrop in "$tables" "Exit"; do
    case $TBdrop in
    "Exit")
      echo "Exiting..."
      break
      ;;
    *)
      if [ -f "./$TBdrop" ]; then
        read -p "Are you sure you want to permanently drop $TBdrop? [y/n]: " dropFlag
        if [[ "$dropFlag" == "y" ]]; then
          rm "$TBdrop"
          echo "$TBdrop is successfully dropped"
          break
        else
          echo "Table drop operation cancelled."
          break
        fi
      else
        echo "Table $TBdrop does not exist."
      fi
      ;;
    esac
  done
}
main